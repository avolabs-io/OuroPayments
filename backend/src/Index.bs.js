// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Async = require("serbet/src/Async.bs.js");
var Decco = require("decco/src/Decco.js");
var Serbet = require("serbet/src/Serbet.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var Belt_Option = require("bs-platform/lib/js/belt_Option.js");

function body_in_decode(v) {
  var dict = Js_json.classify(v);
  if (typeof dict === "number") {
    return Decco.error(undefined, "Not an object", v);
  }
  if (dict.TAG !== /* JSONObject */2) {
    return Decco.error(undefined, "Not an object", v);
  }
  var dict$1 = dict._0;
  var recipient = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "recipient"), null));
  if (recipient.TAG) {
    var e = recipient._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".recipient" + e.path,
              message: e.message,
              value: e.value
            }
          };
  }
  var addressTokenStream = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "addressTokenStream"), null));
  if (addressTokenStream.TAG) {
    var e$1 = addressTokenStream._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".addressTokenStream" + e$1.path,
              message: e$1.message,
              value: e$1.value
            }
          };
  }
  var lengthOfPayment = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "lengthOfPayment"), null));
  if (lengthOfPayment.TAG) {
    var e$2 = lengthOfPayment._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".lengthOfPayment" + e$2.path,
              message: e$2.message,
              value: e$2.value
            }
          };
  }
  var interval = Decco.intFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "interval"), null));
  if (interval.TAG) {
    var e$3 = interval._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".interval" + e$3.path,
              message: e$3.message,
              value: e$3.value
            }
          };
  }
  var rate = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "rate"), null));
  if (rate.TAG) {
    var e$4 = rate._0;
    return {
            TAG: /* Error */1,
            _0: {
              path: ".rate" + e$4.path,
              message: e$4.message,
              value: e$4.value
            }
          };
  }
  var deposit = Decco.stringFromJson(Belt_Option.getWithDefault(Js_dict.get(dict$1, "deposit"), null));
  if (!deposit.TAG) {
    return {
            TAG: /* Ok */0,
            _0: {
              recipient: recipient._0,
              addressTokenStream: addressTokenStream._0,
              lengthOfPayment: lengthOfPayment._0,
              interval: interval._0,
              rate: rate._0,
              deposit: deposit._0
            }
          };
  }
  var e$5 = deposit._0;
  return {
          TAG: /* Error */1,
          _0: {
            path: ".deposit" + e$5.path,
            message: e$5.message,
            value: e$5.value
          }
        };
}

function body_out_encode(v) {
  return Js_dict.fromArray([
              [
                "success",
                Decco.boolToJson(v.success)
              ],
              [
                "error",
                Decco.optionToJson(Decco.stringToJson, v.error)
              ]
            ]);
}

function createChannelRequest_encode(v) {
  return Js_dict.fromArray([
              [
                "partner_address",
                Decco.stringToJson(v.partner_address)
              ],
              [
                "token_address",
                Decco.stringToJson(v.token_address)
              ],
              [
                "total_deposit",
                Decco.stringToJson(v.total_deposit)
              ],
              [
                "settle_timeout",
                Decco.stringToJson(v.settle_timeout)
              ],
              [
                "reveal_timeout",
                Decco.stringToJson(v.reveal_timeout)
              ]
            ]);
}

var endpoint = Serbet.jsonEndpoint(undefined, {
      path: "/create-stream",
      verb: /* POST */1,
      body_in_decode: body_in_decode,
      body_out_encode: body_out_encode,
      handler: (function (param, _req) {
          console.log("recipient - " + (param.recipient + (", addressTokenStream - " + (param.addressTokenStream + (", lengthOfPayment - " + (String(param.lengthOfPayment) + (", interval - " + (String(param.interval) + (", rate" + (param.rate + (", deposit - " + param.deposit)))))))))));
          return Async.async({
                      success: true,
                      error: undefined
                    });
        })
    });

var CreateStream = {
  body_in_decode: body_in_decode,
  body_out_encode: body_out_encode,
  createChannelRequest_encode: createChannelRequest_encode,
  endpoint: endpoint
};

var app = Serbet.application(5000, {
      hd: endpoint,
      tl: /* [] */0
    });

exports.CreateStream = CreateStream;
exports.app = app;
/* endpoint Not a pure module */
