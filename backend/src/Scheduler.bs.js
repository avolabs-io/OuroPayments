// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Async = require("serbet/src/Async.bs.js");
var Decco = require("decco/src/Decco.js");
var Fetch = require("bs-fetch/src/Fetch.js");
var Mongo = require("./Mongo.bs.js");
var BsCron = require("bs-cron/src/BsCron.bs.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Belt_Array = require("bs-platform/lib/js/belt_Array.js");
var Caml_option = require("bs-platform/lib/js/caml_option.js");

function makePaymentRequest_encode(v) {
  return Js_dict.fromArray([
              [
                "amount",
                Decco.stringToJson(v.amount)
              ],
              [
                "identifier",
                Decco.optionToJson(Decco.stringToJson, v.identifier)
              ]
            ]);
}

var dummyData = [{
    recipient: "0xc788F08a2aAf539111e2a2D85BD4B324FBE37B15",
    addressTokenStream: "0xb38981469B7235c42DDa836295bE8825Eb4A6389",
    lengthOfPayment: 86400,
    interval: 60,
    rate: "1",
    deposit: "7200",
    numerOfPaymentsMade: 0,
    totalNumberOfPaymentsToMake: 1440
  }];

function makePayment(recipientAddress, amount) {
  var requestString = "http://localhost:5001/api/v1/payments/0xb38981469B7235c42DDa836295bE8825Eb4A6389/" + recipientAddress;
  console.log(amount);
  return fetch(requestString, Fetch.RequestInit.make(/* Post */2, {
                        "Content-Type": "application/json"
                      }, Caml_option.some(JSON.stringify(makePaymentRequest_encode({
                                    amount: amount,
                                    identifier: undefined
                                  }))), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined)(undefined)).then(function (prim) {
                return prim.json();
              }).then(function (json) {
              return Promise.resolve((console.log("THE RESULT:", json), undefined));
            });
}

function paymentHandler(item) {
  if (item.numerOfPaymentsMade === item.totalNumberOfPaymentsToMake) {
    return ;
  } else {
    makePayment(item.recipient, item.rate);
    return ;
  }
}

function startProcess(collection) {
  var job = BsCron.CronJob.make({
        HASH: /* CronString */870007071,
        VAL: "* * * * *"
      }, (function (param) {
          console.log("Printing every minute");
          Async.let_(Mongo.getStreamss(collection), (function (streams) {
                  Belt_Array.map(streams, paymentHandler);
                  return Async.async(undefined);
                }));
          
        }), undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined);
  job.start();
  
}

exports.makePaymentRequest_encode = makePaymentRequest_encode;
exports.dummyData = dummyData;
exports.makePayment = makePayment;
exports.paymentHandler = paymentHandler;
exports.startProcess = startProcess;
/* Async Not a pure module */
